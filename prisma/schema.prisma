generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  guest       guest[]
}

model employee_data {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id String    @db.Uuid
  job_title   String    @db.VarChar(255)
  department  String    @db.VarChar(255)
  start_date  DateTime  @db.Date
  end_date    DateTime? @db.Date
  salary      Int
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user        user      @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model guest {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id   String   @db.Uuid
  first_name   String   @db.VarChar(255)
  last_name    String   @db.VarChar(255)
  email        String   @db.VarChar(255)
  phone_number String   @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  company      company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model payroll {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id  String   @db.Uuid
  gross_salary Int
  net_salary   Int
  tax          Int
  deductions   Int
  payment_date DateTime @db.Date
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user         user     @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String          @unique @db.VarChar(255)
  firstName     String?         @db.VarChar(255)
  lastName      String?         @db.VarChar(255)
  roq_user_id   String          @db.VarChar(255)
  tenant_id     String          @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  company       company[]
  employee_data employee_data[]
  payroll       payroll[]
  vacation      vacation[]
}

model vacation {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id String   @db.Uuid
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  status      String   @db.VarChar(50)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
